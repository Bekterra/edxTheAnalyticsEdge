library(ISLR)
install.packages(c("ISLR", "caret"))
library(ISLR)
library(caret)
data(Wage)
inTrain<-createDataPartition(y=Wage$wage, p=0.7,list=FALSE)
training<-Wage[inTrain, ]
testing<-Wage[-inTrain, ]
library(splines)
bsBasis<-bs(traing$age, df=3)
bsBasis<-bs(training$age, df=3)
lm1<-lm(Wage~bsBasis, data=training)
lm1<-lm(wage~bsBasis, data=training)
pretest<-predict(bsBasis, age=testing$age)
predict(lm1, pretest)
testing
predict(bsBasis, age=testing$age)
?predict
class(bsBasis)
summary(lm)
sumamry(lm1)
summary(lm1)
predict(lm1, newdata=pretest)
p<-predict(lm1, newdata=pretest)
p[1]
lm1$fitted[1]
class(pretest)
p<-predict(lm1, newdata=as.dataframe(pretest))
p<-predict(lm1, newdata=data.frame(pretest))
p[1]
pretest<-bs(age=testing$age,df=3)
pretest<-bs(testing$age,df=3)
p<-predict(lm1, newdata=pretest)
p[1]
pretest
pretest
pretest.bs
pretest[1]
pretest[[1]]
pretest[1,]
?bs
predict.bs()
predict(bsBasis, newx=test$age)
predict(bsBasis, newx=testing$age)
pretest<-predict(bsBasis, newx=testing$age)
p<-predict(lm1, newdata=testing)
bsBasis<-bs(training$age, df=3)
lm1<-lm(wage~bsBasis, data=training)
p<-predict(lm1, newdata=testing)
lm2<-lm(wage~age, data=training)
predict(lm2, testing)
y<-predict(lm2, testing)
library(kernlab)
library(caret)
data(spam)
inTrain<-createDataPartition(y=spam$type, p=0.75,list=FALSE)
training<-Wage[inTrain, ]
testing<-Wage[-inTrain, ]
install.packages("kernlab")
?prcomp
library(kernlab)
library(caret)
data(spam)
inTrain<-createDataPartition(y=spam$type, p=0.75,list=FALSE)
training<-spam[inTrain, ]
testing<-spam[-inTrain, ]
smallSpam<-spam[,c(34,32)]
prComp<-prcomp(smallSpam)
prComp
spam[,-58]
head(spam[,-58])
spam[,-58]+1
head(spam[,-58]+1)
head(spam)
prcomp(log10(spam[,-58]+1))
prComp<-prcomp(log10(spam[,-58]+1))
prComp
prComp
preProc<-preProcess(log10(spam[,-58]+1), method="pca",pcaComp=2)
trainPC<-predict(preProc, log10(training[,-58]+1))
fit<-train(training$type~., method="glm",data=trainPC)
fit<-train(training$type ~ ., method="glm",data=trainPC)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
data(concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
summary(mixtures)
head(mixture)
View(mixtures)
plot(mixtures$CompressiveStrength)
?cut2
install.packages("Hmisc")
?cut2
?cut2()
??cut2()
summary(mixtures)
plot(training$CompressiveStrength, col=cut2(Cement, g=10) )
library(Hmisc)
plot(training$CompressiveStrength, col=cut2(Cement, g=10) )
plot(training$CompressiveStrength, col=cut2(training$Cement, g=10) )
plot(training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag, g=10) )
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10) )
plot(training$CompressiveStrength, col=cut2(training$Water, g=10) )
plot(training$CompressiveStrength, col=cut2(training$Superplasticizer, g=10) )
plot(training$CompressiveStrength, col=cut2(training$CoarseAggregate, g=10) )
plot(training$CompressiveStrength, col=cut2(training$FineAggregate, g=10) )
plot(training$CompressiveStrength, col=cut2(training$Age, g=10) )
plot(training$CompressiveStrength, col=cut2(training$FlyAsh, g=10) )
plot(training$CompressiveStrength, col=cut2(training$Age, g=10) )
hist(training$SuperPlasticizer)
training$SuperPlasticizer
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
View(training)
names(training)
training$Superplasticizer
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
View(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
names(training)
?grep
grep("IL", names(training))
grep("IL", names(training), value=TRUE
)
training[,grep("IL", names(training))]
?preProcess
preProc<-preProcess(training[,grep("IL", names(training))],method="pca")
M<-abs(cor(training[,grep("IL", names(training))]))
diag(M)<-0
which(M>0.8, arr.ind=T)
M
preProc
p<-preProcess(training[,grep("IL", names(training))],method="pca")
p
trainPC<-predict(p, training[,grep("IL", names(training))])
View(trainPC)
fit<-train(training$diagnosis ~ ., method="glm", data=trainPC)
fit<-train(training$diagnosis ~ ., method="lm", data=trainPC)
?train
View(trainPC)
fit<-train(training$diagnosis ~ ., data=trainPC, method="glm")
?preProcess
p<-preProcess(training[,grep("IL", names(training))],method="pca", thresh=0.8)
trainPC<-predict(p, training[,grep("IL", names(training))])
View(trainPC)
names(trainPC)
grep("IL", names(predictors))
grep("IL", names(adData)
)
training = adData[ inTrain, c(grep("IL", names(adData)),1)]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain, c(grep("IL", names(adData)),1)]
View(training)
training = adData[ inTrain, c(1,grep("IL", names(adData)))]
testing = adData[-inTrain,, c(1,grep("IL", names(adData)))]
testing = adData[-inTrain,c(1,grep("IL", names(adData)))]
names(train)
names(training)
fit1<-train(diagnosis~.,data=training, method="glm")
install.packages("e1071")
p<-preProcess(training,method="pca", thresh=0.8)
View(training)
p<-preProcess(training[,-1],method="pca", thresh=0.8)
trainPC<-predict(p, training[,-1])
fit2<-train(training$diagnosis~.,data=training, method="glm")
fit1<-train(diagnosis~.,data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(fit1, testing))
p<-preProcess(training[,-1],method="pca", thresh=0.8)
trainPC<-predict(p, training[,-1])
fit2<-train(training$diagnosis~.,data=training, method="glm")
testPC<-predict(p, testing[,-1])
confusionMatrix(testing$diagnosis, predict(fit2, testPC))
View(testPC)
View(testing)
summry(fit2)
summary(fit2)
fit2<-train(training$diagnosis~.,data=training, method="glm")
summary(fit2)
View(trainPC)
confusionMatrix(testing$diagnosis, predict(fit2, testing[,-1]))
predict(fit2, testing[,-1])
fit1<-train(diagnosis~.,data=training, method="glm")
fit1<-train(diagnosis~.,data=training, method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain, c(1,grep("IL", names(adData)))]
testing = adData[-inTrain,c(1,grep("IL", names(adData)))]
fit1<-train(diagnosis~.,data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(fit1, testing[,-1]))
p<-preProcess(training[,-1],method="pca", thresh=0.8)
trainPC<-predict(p, training[,-1])
fit2<-train(training$diagnosis~.,data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(fit2, testing[,-1]))
summary(fit1)
sumary(fit2)
summary(fit2)
trainPC<-predict(p, training[,-1])
p<-preProcess(training[,-1],method="pca", thresh=0.8)
trainPC<-predict(p, training[,-1])
fit2<-train(training$diagnosis~.,data=training, method="glm")
summary(fit2)
confusionMatrix(testing$diagnosis, predict(fit1, testing[,-1]))
confusionMatrix(testing$diagnosis, predict(fit2, testing[,-1]))
fit2<-train(training$diagnosis~.,data=trainPC, method="glm")
summary(fit2)
p<-preProcess(training[,-1],method="pca", thresh=0.8)
trainPC<-predict(p, training[,-1])
fit2<-train(training$diagnosis~.,data=trainPC, method="glm")
testPC<-predict(p, testing[,-1])
confusionMatrix(testing$diagnosis, predict(fit2, testPC))
View(testPC)
View(testPC)
fit3<-lm(training$diagnosis ~ ., data=trainPC)
summary(fit3)
summary(fit1)
fit3<-lm(diagnosis ~ ., data=data.frame(diagnosis,trainPC))
fit3<-lm(diagnosis ~ ., data=data.frame(training$diagnosis,trainPC))
training$diagnosis
data.frame(training$diagnosis,trainPC
)
head(data.frame(training$diagnosis,trainPC))
fit3<-lm(diagnosis ~ ., data=data.frame(diagnosis=training$diagnosis,trainPC))
fit3<-lm(training$diagnosis~.,data=trainPC)
fit3<-glm(training$diagnosis~.,data=trainPC)
summary(trainPC)
summary(diagnosis)
View(training)
set.seed(12345)
fit1<-train(diagnosis~.,data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(fit1, testing[,-1]))
confusionMatrix(testing$diagnosis, predict(fit1, testing))
set.seed(12345)
p<-preProcess(training[,-1],method="pca", thresh=0.8)
trainPC<-predict(p, training[,-1])
fit2<-train(training$diagnosis~.,data=trainPC, method="glm")
testPC<-predict(p, testing[,-1])
confusionMatrix(testing$diagnosis, predict(fit2, testPC))
p<-preProcess(training[,-1],method="pca")
trainPC<-predict(p, training[,-1])
fit2<-train(training$diagnosis~.,data=trainPC, method="glm")
testPC<-predict(p, testing[,-1])
confusionMatrix(testing$diagnosis, predict(fit2, testPC))
p<-preProcess(training[,-1],method="pca",thresh=0.8)
trainPC<-predict(p, training[,-1])
fit2<-train(training$diagnosis~.,data=trainPC, method="glm")
testPC<-predict(p, testing[,-1])
confusionMatrix(testing$diagnosis, predict(fit2, testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain, c(1,grep("IL", names(adData)))]
testing = adData[-inTrain,c(1,grep("IL", names(adData)))]
fit1<-train(diagnosis~.,data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(fit1, testing))
confusionMatrix(testing$diagnosis, predict(fit1, newdata=testing))
?train
fit2<-train(training$diagnosis~.,data=trainPC, method="glm", preProcess="pca", trControl=trainControl(thresh = 0.95))
?list
fit2<-train(training$diagnosis~.,data=trainPC, method="glm", preProcess="pca", trControl=trainControl(preProcOptions=list(thresh = 0.95))
)
confusionMatrix(testing$diagnosis, predict(fit2, testing))
fit2<-train(training$diagnosis~.,data=training, method="glm", preProcess="pca",
trControl=trainControl(preProcOptions=list(thresh = 0.95)))
confusionMatrix(testing$diagnosis, predict(fit2, testing))
# PCA
fit2<-train(training$diagnosis~.,data=training, method="glm", preProcess="pca",
trControl=trainControl(preProcOptions=list(thresh = 0.8)))
confusionMatrix(testing$diagnosis, predict(fit2, testing))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(13433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain, c(1,grep("IL", names(adData)))]
testing = adData[-inTrain,c(1,grep("IL", names(adData)))]
fit1<-train(diagnosis~.,data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(fit1, newdata=testing))
fit2<-train(training$diagnosis~.,data=training, method="glm", preProcess="pca",
trControl=trainControl(preProcOptions=list(thresh = 0.8)))
confusionMatrix(testing$diagnosis, predict(fit2, testing))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("randomForest")
library(randomForest)
head(iris)
table(iris$Species)
# Define the design matrix and the classifciation target
X <iris[, 1:4]
X <-iris[, 1:4]
Y <-iris$Species
rf <randomForest(  x=X, y=Y, ntree=200, do.trace=T)
rf <-randomForest(x=X, y=Y, ntree=200, do.trace=T)
rf
plot(rf)
importance(rf)
barplot(t(importance(rf)), col=4)
colors()
WHO = read.csv("WHO.csv")
setwd("D:/doc/study/TheAnalyticsEdge/unit7")
WHO = read.csv("WHO.csv")
library(ggplot2)
scatterplot = ggplot(WHO, aes(x = GNI, y = FertilityRate))
scatterplot + geom_point(color = "blue", size = 3, shape = 15)
setwd("D:/doc/study/TheAnalyticsEdge/unit7")
WHO = read.csv("WHO.csv")
WHO = read.csv("WHO.csv")
scatterplot = ggplot(WHO, aes(x = GNI, y = FertilityRate))
scatterplot + geom_point(colour = "blue", size = 3, shape = 15) + ggtitle("Fertility Rate vs. Gross National Income")
ggplot(WHO, aes(x = FertilityRate, y = Under15, color = Region )) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15, color = Region,size = 3, shape = 15 )) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15, color = Region )) + geom_point(size = 3, shape = 15)
